# This file is responsible for configuring your application
# and its dependencies with the aid of the Config module.
#
# This configuration file is loaded before any dependency and
# is restricted to this project.

# General application configuration
import Config

# Configure Ecto repos
config :advisor_ai, ecto_repos: [AdvisorAi.Repo]

# Configure your database
config :advisor_ai, AdvisorAi.Repo,
  username: System.get_env("POSTGRES_USER", "postgres"),
  password: System.get_env("POSTGRES_PASSWORD", "postgres"),
  hostname: System.get_env("POSTGRES_HOST", "localhost"),
  database: System.get_env("POSTGRES_DB", "advisor_ai_dev"),
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10,
  types: Pgvector.PostgresTypes

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :advisor_ai, AdvisorAiWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: String.to_integer(System.get_env("PORT") || "4000")],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: System.get_env("SECRET_KEY_BASE", "your-secret-key-base-here"),
  watchers: [
    esbuild:
      {Esbuild, :install_and_run,
       [:advisor_ai, ~w(--watch=advisor_ai=js/advisor_ai.js --minify=js.min.js --sourcemap=js)]},
    tailwind: {Tailwind, :install_and_run, [:advisor_ai, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :advisor_ai, AdvisorAiWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/advisor_ai_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :advisor_ai, dev_routes: true

# Configure esbuild (the version is required).
config :esbuild,
  version: "0.17.11",
  advisor_ai: [
    args:
      ~w(js/app.js --bundle --target=es2017 --outdir=../priv/static/assets --external:/fonts/* --external:/images/*),
    cd: Path.expand("../assets", __DIR__),
    env: %{"NODE_PATH" => Path.expand("../deps", __DIR__)}
  ]

# Configure tailwind
config :tailwind,
  version: "3.4.3",
  advisor_ai: [
    args: ~w(
      --config=tailwind.config.js
      --input=css/app.css
      --output=../priv/static/assets/app.css
    ),
    cd: Path.expand("../assets", __DIR__)
  ]

# Configure OpenAI
config :advisor_ai, :openai_client, OpenAI

# OpenAI API configuration will be set in runtime.exs

# Configure OAuth providers
config :ueberauth, Ueberauth,
  providers: [
    google:
      {Ueberauth.Strategy.Google,
       [
         default_scope:
           "email profile https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events https://www.googleapis.com/auth/contacts https://www.googleapis.com/auth/contacts.readonly https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/user.emails.read https://www.googleapis.com/auth/user.addresses.read https://www.googleapis.com/auth/user.birthday.read https://www.googleapis.com/auth/user.phonenumbers.read https://www.googleapis.com/auth/user.organization.read https://www.googleapis.com/auth/user.gender.read https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",
         access_type: "offline",
         prompt: "consent"
       ]},
    hubspot:
      {AdvisorAi.Auth.HubSpotStrategy,
       [
         default_scope: "",
         send_redirect_uri: true
       ]}
  ]

config :ueberauth, Ueberauth.Strategy.Google.OAuth,
  client_id: System.get_env("GOOGLE_CLIENT_ID"),
  client_secret: System.get_env("GOOGLE_CLIENT_SECRET")

config :ueberauth, Ueberauth.Strategy.HubSpot.OAuth,
  client_id: System.get_env("HUBSPOT_CLIENT_ID", "your-hubspot-client-id"),
  client_secret: System.get_env("HUBSPOT_CLIENT_SECRET", "your-hubspot-client-secret"),
  redirect_uri:
    System.get_env("HUBSPOT_REDIRECT_URI", "http://localhost:4000/auth/hubspot/callback")

# Oban configuration moved to runtime.exs

# Configure Swoosh for email
config :advisor_ai, AdvisorAi.Mailer, adapter: Swoosh.Adapters.Local

# Do not print debug messages in production
config :logger, level: :info

# Runtime configuration is read, including optional
# environment variables. See `config/runtime.exs`.

# Configures the endpoint
config :advisor_ai, AdvisorAiWeb.Endpoint,
  url: [host: "localhost"],
  adapter: Bandit.PhoenixAdapter,
  render_errors: [
    formats: [html: AdvisorAiWeb.ErrorHTML, json: AdvisorAiWeb.ErrorJSON],
    layout: false
  ],
  pubsub_server: AdvisorAi.PubSub,
  live_view: [signing_salt: "n53i5jGx"]

# Configures the mailer
#
# By default it uses the "Local" adapter which stores the emails
# locally. You can see the emails in your browser, at "/dev/mailbox".
#
# For production it's recommended to configure a different adapter
# at the `config/runtime.exs`.
config :advisor_ai, AdvisorAi.Mailer, adapter: Swoosh.Adapters.Local

# Configures Elixir's Logger
config :logger, :console,
  format: "$time $metadata[$level] $message\n",
  metadata: [:request_id]

# Use Jason for JSON parsing in Phoenix
config :phoenix, :json_library, Jason

# Import environment specific config. This must remain at the bottom
# of this file so it overrides the configuration defined above.
import_config "#{config_env()}.exs"
